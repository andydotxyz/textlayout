package harfbuzz

import (
	"fmt"

	"github.com/benoitkugler/textlayout/fonts"
	"github.com/benoitkugler/textlayout/fonts/truetype"
	tt "github.com/benoitkugler/textlayout/fonts/truetype"
)

// ported from harfbuzz/src/hb-aat-layout.h  Copyright Â© 2018 Ebrahim Byagowi, Behdad Esfahbod

// The possible feature types defined for AAT shaping,
// from https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html
type hb_aat_layout_feature_type_t = uint16

const (
	// Initial, unset feature type
	HB_AAT_LAYOUT_FEATURE_TYPE_INVALID = 0xFFFF
	// [All Typographic Features](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type0)
	HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC = 0
	// [Ligatures](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type1)
	HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES = 1
	// [Cursive Connection](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type2)
	HB_AAT_LAYOUT_FEATURE_TYPE_CURISVE_CONNECTION = 2
	// [Letter Case](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type3)
	HB_AAT_LAYOUT_FEATURE_TYPE_LETTER_CASE = 3
	// [Vertical Substitution](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type4)
	HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION = 4
	// [Linguistic Rearrangement](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type5)
	HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT = 5
	// [Number Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type6)
	HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING = 6
	// [Smart Swash](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type8)
	HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE = 8
	// [Diacritics](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type9)
	HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE = 9
	// [Vertical Position](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type10)
	HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION = 10
	// [Fractions](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type11)
	HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS = 11
	// [Overlapping Characters](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type13)
	HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE = 13
	// [Typographic Extras](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type14)
	HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS = 14
	// [Mathematical Extras](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type15)
	HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS = 15
	// [Ornament Sets](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type16)
	HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE = 16
	// [Character Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type17)
	HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES = 17
	// [Design Complexity](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type18)
	HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE = 18
	// [Style Options](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type19)
	HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS = 19
	// [Character Shape](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type20)
	HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE = 20
	// [Number Case](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type21)
	HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE = 21
	// [Text Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type22)
	HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING = 22
	// [Transliteration](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type23)
	HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION = 23
	// [Annotation](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type24)
	HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE = 24
	// [Kana Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type25)
	HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE = 25
	// [Ideographic Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type26)
	HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE = 26
	// [Unicode Decomposition](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type27)
	HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE = 27
	// [Ruby Kana](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type28)
	HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA = 28
	// [CJK Symbol Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type29)
	HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE = 29
	// [Ideographic Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type30)
	HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE = 30
	// [CJK Vertical Roman Placement](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type31)
	HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE = 31
	// [Italic CJK Roman](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type32)
	HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN = 32
	// [Case Sensitive Layout](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type33)
	HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT = 33
	// [Alternate Kana](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type34)
	HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA = 34
	// [Stylistic Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type35)
	HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES = 35
	// [Contextual Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type36)
	HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES = 36
	// [Lower Case](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type37)
	HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE = 37
	// [Upper Case](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type38)
	HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE = 38
	// [Language Tag](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type39)
	HB_AAT_LAYOUT_FEATURE_TYPE_LANGUAGE_TAG_TYPE = 39
	// [CJK Roman Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type103)
	HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE = 103
)

// The selectors defined for specifying AAT feature settings.
type hb_aat_layout_feature_selector_t = uint16

const (
	// Initial, unset feature selector
	HB_AAT_LAYOUT_FEATURE_SELECTOR_INVALID = 0xFFFF

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_ON = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_OFF = 1

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_ON = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_OFF = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_ON = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_OFF = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_ON = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_OFF = 5
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_ON = 6
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_OFF = 7
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_ON = 8
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_OFF = 9
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_ON = 10
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_OFF = 11
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_ON = 12
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_OFF = 13
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_ON = 14
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_OFF = 15
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_ON = 16
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_OFF = 17
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_ON = 18
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_OFF = 19
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_ON = 20
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_OFF = 21

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_UNCONNECTED = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PARTIALLY_CONNECTED = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CURSIVE = 2

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_LETTER_CASE */
	// Deprecated
	HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_AND_LOWER_CASE = 0 /* deprecated */
	// Deprecated
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_CAPS = 1 /* deprecated */
	// Deprecated
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_LOWER_CASE = 2 /* deprecated */
	// Deprecated
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SMALL_CAPS = 3 /* deprecated */
	// Deprecated
	HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS = 4 /* deprecated */
	// Deprecated
	HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS_AND_SMALL_CAPS = 5 /* deprecated */

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_ON = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_OFF = 1

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT
	HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_ON = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT
	HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_OFF = 1

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING
	HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_NUMBERS = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_NUMBERS = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING
	HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_NUMBERS = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING
	HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_NUMBERS = 3

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_ON = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_OFF = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_ON = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_OFF = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_ON = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_OFF = 5
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_ON = 6
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_OFF = 7
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_ON = 8
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_OFF = 9

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SHOW_DIACRITICS = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HIDE_DIACRITICS = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DECOMPOSE_DIACRITICS = 2

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NORMAL_POSITION = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SUPERIORS = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_INFERIORS = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ORDINALS = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SCIENTIFIC_INFERIORS = 4

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_FRACTIONS = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_VERTICAL_FRACTIONS = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAGONAL_FRACTIONS = 2

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_ON = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_OFF = 1

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_ON = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_OFF = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_ON = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_OFF = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_ON = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_OFF = 5
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_ON = 6
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_OFF = 7
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_ON = 8
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_OFF = 9
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_ON = 10
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_OFF = 11

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_ON = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_OFF = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_ON = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_OFF = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_ON = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_OFF = 5
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_ON = 6
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_OFF = 7
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_ON = 8
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_OFF = 9
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_ON = 10
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_OFF = 11

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ORNAMENTS = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DINGBATS = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PI_CHARACTERS = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_FLEURONS = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DECORATIVE_BORDERS = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_INTERNATIONAL_SYMBOLS = 5
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_MATH_SYMBOLS = 6

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ALTERNATES = 0

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL1 = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL2 = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL3 = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL4 = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL5 = 4

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLE_OPTIONS = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DISPLAY_TEXT = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ENGRAVED_TEXT = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ILLUMINATED_CAPS = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_TITLING_CAPS = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS
	HB_AAT_LAYOUT_FEATURE_SELECTOR_TALL_CAPS = 5

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_CHARACTERS = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SIMPLIFIED_CHARACTERS = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1978_CHARACTERS = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1983_CHARACTERS = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1990_CHARACTERS = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_ONE = 5
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_TWO = 6
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_THREE = 7
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FOUR = 8
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FIVE = 9
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPERT_CHARACTERS = 10
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS2004_CHARACTERS = 11
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HOJO_CHARACTERS = 12
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NLCCHARACTERS = 13
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_NAMES_CHARACTERS = 14

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_NUMBERS = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_NUMBERS = 1

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_TEXT = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING
	HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_TEXT = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_TEXT = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING
	HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_TEXT = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING
	HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_TEXT = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_PROPORTIONAL_TEXT = 5
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_HALF_WIDTH_TEXT = 6

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_TRANSLITERATION = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HIRAGANA_TO_KATAKANA = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_KATAKANA_TO_HIRAGANA = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_KANA_TO_ROMANIZATION = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_HIRAGANA = 5
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_KATAKANA = 6
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_ONE = 7
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_TWO = 8
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_THREE = 9

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ANNOTATION = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_BOX_ANNOTATION = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ROUNDED_BOX_ANNOTATION = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CIRCLE_ANNOTATION = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_CIRCLE_ANNOTATION = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PARENTHESIS_ANNOTATION = 5
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIOD_ANNOTATION = 6
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMAN_NUMERAL_ANNOTATION = 7
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAMOND_ANNOTATION = 8
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_BOX_ANNOTATION = 9
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_ROUNDED_BOX_ANNOTATION = 10

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_KANA = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_KANA = 1

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_IDEOGRAPHS = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_IDEOGRAPHS = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_IDEOGRAPHS = 2

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_ON = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_OFF = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_ON = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_OFF = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_ON = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_OFF = 5

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA */
	// Deprecated; use #HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_OFF instead
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_RUBY_KANA = 0 /* deprecated - use RUBY_KANA_OFF instead */
	// Deprecated; use #HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_ON instead
	HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA = 1 /* deprecated - use RUBY_KANA_ON instead */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA
	HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_ON = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA
	HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_OFF = 3

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_SYMBOL_ALTERNATIVES = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_ONE = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_TWO = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_THREE = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FOUR = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FIVE = 5

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_IDEOGRAPHIC_ALTERNATIVES = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_ONE = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_TWO = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_THREE = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FOUR = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FIVE = 5

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_CENTERED = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_HBASELINE = 1

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN */
	// Deprecated; use #HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_OFF instead
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_ITALIC_ROMAN = 0 /* deprecated - use CJK_ITALIC_ROMAN_OFF instead */
	// Deprecated; use #HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_ON instead
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN = 1 /* deprecated - use CJK_ITALIC_ROMAN_ON instead */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_ON = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_OFF = 3

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_ON = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_OFF = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_ON = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_OFF = 3

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_ON = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_OFF = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_ON = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA
	HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_OFF = 3

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLISTIC_ALTERNATES = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_ON = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_OFF = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_ON = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_OFF = 5
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_ON = 6
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_OFF = 7
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_ON = 8
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_OFF = 9
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_ON = 10
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_OFF = 11
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_ON = 12
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_OFF = 13
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_ON = 14
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_OFF = 15
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_ON = 16
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_OFF = 17
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_ON = 18
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_OFF = 19
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_ON = 20
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_OFF = 21
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_ON = 22
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_OFF = 23
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_ON = 24
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_OFF = 25
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_ON = 26
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_OFF = 27
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_ON = 28
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_OFF = 29
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_ON = 30
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_OFF = 31
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_ON = 32
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_OFF = 33
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_ON = 34
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_OFF = 35
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_ON = 36
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_OFF = 37
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_ON = 38
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_OFF = 39
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_ON = 40
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_OFF = 41

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_ON = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_OFF = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_ON = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_OFF = 3
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_ON = 4
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES
	HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_OFF = 5

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_LOWER_CASE = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_SMALL_CAPS = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_PETITE_CAPS = 2

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_UPPER_CASE = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_SMALL_CAPS = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_PETITE_CAPS = 2

	/* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE */
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_CJK_ROMAN = 0
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_CJK_ROMAN = 1
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_CJK_ROMAN = 2
	// for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE
	HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_CJK_ROMAN = 3
)

/* Mapping from OpenType feature tags to AAT feature names and selectors.
 *
 * Table data courtesy of Apple.  Converted from mnemonics to integers
 * when moving to this file. */
var featureMappings = [...]aatFeatureMapping{
	{newTag('a', 'f', 'r', 'c'), HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS, HB_AAT_LAYOUT_FEATURE_SELECTOR_VERTICAL_FRACTIONS, HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_FRACTIONS},
	{newTag('c', '2', 'p', 'c'), HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE, HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_PETITE_CAPS, HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_UPPER_CASE},
	{newTag('c', '2', 's', 'c'), HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE, HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_SMALL_CAPS, HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_UPPER_CASE},
	{newTag('c', 'a', 'l', 't'), HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_OFF},
	{newTag('c', 'a', 's', 'e'), HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT, HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_OFF},
	{newTag('c', 'l', 'i', 'g'), HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES, HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_OFF},
	{newTag('c', 'p', 's', 'p'), HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT, HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_OFF},
	{newTag('c', 's', 'w', 'h'), HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_OFF},
	{newTag('d', 'l', 'i', 'g'), HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES, HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_OFF},
	{newTag('e', 'x', 'p', 't'), HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE, HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPERT_CHARACTERS, 16},
	{newTag('f', 'r', 'a', 'c'), HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS, HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAGONAL_FRACTIONS, HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_FRACTIONS},
	{newTag('f', 'w', 'i', 'd'), HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_TEXT, 7},
	{newTag('h', 'a', 'l', 't'), HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_HALF_WIDTH_TEXT, 7},
	{newTag('h', 'i', 's', 't'), HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES, HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_OFF},
	{newTag('h', 'k', 'n', 'a'), HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA, HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_OFF},
	{newTag('h', 'l', 'i', 'g'), HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES, HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_OFF},
	{newTag('h', 'n', 'g', 'l'), HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION, HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL, HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_TRANSLITERATION},
	{newTag('h', 'o', 'j', 'o'), HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE, HB_AAT_LAYOUT_FEATURE_SELECTOR_HOJO_CHARACTERS, 16},
	{newTag('h', 'w', 'i', 'd'), HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_TEXT, 7},
	{newTag('i', 't', 'a', 'l'), HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN, HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_OFF},
	{newTag('j', 'p', '0', '4'), HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE, HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS2004_CHARACTERS, 16},
	{newTag('j', 'p', '7', '8'), HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE, HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1978_CHARACTERS, 16},
	{newTag('j', 'p', '8', '3'), HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE, HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1983_CHARACTERS, 16},
	{newTag('j', 'p', '9', '0'), HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE, HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1990_CHARACTERS, 16},
	{newTag('l', 'i', 'g', 'a'), HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES, HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_OFF},
	{newTag('l', 'n', 'u', 'm'), HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE, HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_NUMBERS, 2},
	{newTag('m', 'g', 'r', 'k'), HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS, HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_OFF},
	{newTag('n', 'l', 'c', 'k'), HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE, HB_AAT_LAYOUT_FEATURE_SELECTOR_NLCCHARACTERS, 16},
	{newTag('o', 'n', 'u', 'm'), HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE, HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_NUMBERS, 2},
	{newTag('o', 'r', 'd', 'n'), HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION, HB_AAT_LAYOUT_FEATURE_SELECTOR_ORDINALS, HB_AAT_LAYOUT_FEATURE_SELECTOR_NORMAL_POSITION},
	{newTag('p', 'a', 'l', 't'), HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_PROPORTIONAL_TEXT, 7},
	{newTag('p', 'c', 'a', 'p'), HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE, HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_PETITE_CAPS, HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_LOWER_CASE},
	{newTag('p', 'k', 'n', 'a'), HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_TEXT, 7},
	{newTag('p', 'n', 'u', 'm'), HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_NUMBERS, 4},
	{newTag('p', 'w', 'i', 'd'), HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_TEXT, 7},
	{newTag('q', 'w', 'i', 'd'), HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_TEXT, 7},
	{newTag('r', 'u', 'b', 'y'), HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA, HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_OFF},
	{newTag('s', 'i', 'n', 'f'), HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION, HB_AAT_LAYOUT_FEATURE_SELECTOR_SCIENTIFIC_INFERIORS, HB_AAT_LAYOUT_FEATURE_SELECTOR_NORMAL_POSITION},
	{newTag('s', 'm', 'c', 'p'), HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE, HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_SMALL_CAPS, HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_LOWER_CASE},
	{newTag('s', 'm', 'p', 'l'), HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE, HB_AAT_LAYOUT_FEATURE_SELECTOR_SIMPLIFIED_CHARACTERS, 16},
	{newTag('s', 's', '0', '1'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_OFF},
	{newTag('s', 's', '0', '2'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_OFF},
	{newTag('s', 's', '0', '3'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_OFF},
	{newTag('s', 's', '0', '4'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_OFF},
	{newTag('s', 's', '0', '5'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_OFF},
	{newTag('s', 's', '0', '6'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_OFF},
	{newTag('s', 's', '0', '7'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_OFF},
	{newTag('s', 's', '0', '8'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_OFF},
	{newTag('s', 's', '0', '9'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_OFF},
	{newTag('s', 's', '1', '0'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_OFF},
	{newTag('s', 's', '1', '1'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_OFF},
	{newTag('s', 's', '1', '2'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_OFF},
	{newTag('s', 's', '1', '3'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_OFF},
	{newTag('s', 's', '1', '4'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_OFF},
	{newTag('s', 's', '1', '5'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_OFF},
	{newTag('s', 's', '1', '6'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_OFF},
	{newTag('s', 's', '1', '7'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_OFF},
	{newTag('s', 's', '1', '8'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_OFF},
	{newTag('s', 's', '1', '9'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_OFF},
	{newTag('s', 's', '2', '0'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_OFF},
	{newTag('s', 'u', 'b', 's'), HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION, HB_AAT_LAYOUT_FEATURE_SELECTOR_INFERIORS, HB_AAT_LAYOUT_FEATURE_SELECTOR_NORMAL_POSITION},
	{newTag('s', 'u', 'p', 's'), HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION, HB_AAT_LAYOUT_FEATURE_SELECTOR_SUPERIORS, HB_AAT_LAYOUT_FEATURE_SELECTOR_NORMAL_POSITION},
	{newTag('s', 'w', 's', 'h'), HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES, HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_OFF},
	{newTag('t', 'i', 't', 'l'), HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS, HB_AAT_LAYOUT_FEATURE_SELECTOR_TITLING_CAPS, HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLE_OPTIONS},
	{newTag('t', 'n', 'a', 'm'), HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE, HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_NAMES_CHARACTERS, 16},
	{newTag('t', 'n', 'u', 'm'), HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_NUMBERS, 4},
	{newTag('t', 'r', 'a', 'd'), HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE, HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_CHARACTERS, 16},
	{newTag('t', 'w', 'i', 'd'), HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_TEXT, 7},
	{newTag('u', 'n', 'i', 'c'), HB_AAT_LAYOUT_FEATURE_TYPE_LETTER_CASE, 14, 15},
	{newTag('v', 'a', 'l', 't'), HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_PROPORTIONAL_TEXT, 7},
	{newTag('v', 'e', 'r', 't'), HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION, HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_OFF},
	{newTag('v', 'h', 'a', 'l'), HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_HALF_WIDTH_TEXT, 7},
	{newTag('v', 'k', 'n', 'a'), HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA, HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_OFF},
	{newTag('v', 'p', 'a', 'l'), HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING, HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_PROPORTIONAL_TEXT, 7},
	{newTag('v', 'r', 't', '2'), HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION, HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_OFF},
	{newTag('z', 'e', 'r', 'o'), HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS, HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_ON, HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_OFF},
}

// hb_aat_layout_feature_selector_info_t represents a setting for an `hb_aat_layout_feature_type_t`.
type hb_aat_layout_feature_selector_info_t struct {
	name_id tt.NameID                        // selector's name identifier
	enable  hb_aat_layout_feature_selector_t // value to turn the selector on
	disable hb_aat_layout_feature_selector_t // value to turn the selector off
}

// Used when getting or setting AAT feature selectors. Indicates that
// there is no selector index corresponding to the selector of interest.
const HB_AAT_LAYOUT_NO_SELECTOR_INDEX = 0xFFFF

/* Note: This context is used for kerning, even without AAT, hence the condition. */

/**
 * SECTION:hb-aat-layout
 * @title: hb-aat-layout
 * @short_description: Apple Advanced Typography Layout
 * @include: hb-aat.h
 *
 * Functions for querying AAT Layout features in the font face.
 *
 * HarfBuzz supports all of the AAT tables (in their modern version) used to implement shaping. Other
 * AAT tables and their associated features are not supported.
 **/

// execute the state machine in AAT tables
type StateTableDriver struct {
	machine tt.AATStateTable
	buffer  *Buffer
}

func newStateTableDriver(machine tt.AATStateTable, buffer *Buffer, face Face) StateTableDriver {
	return StateTableDriver{
		machine: machine,
		buffer:  buffer,
	}
}

// implemented by the subtables
type driverContext interface {
	inPlace() bool
	isActionable(s StateTableDriver, entry tt.AATStateEntry) bool
	transition(s StateTableDriver, entry tt.AATStateEntry)
}

func (s StateTableDriver) drive(c driverContext) {
	const (
		stateStartOfText = uint16(0)

		classEndOfText = uint16(0)

		DontAdvance = 0x4000
	)
	if !c.inPlace() {
		s.buffer.clearOutput()
	}

	state := stateStartOfText
	for s.buffer.idx = 0; ; {
		class := classEndOfText
		if s.buffer.idx < len(s.buffer.Info) {
			class = s.machine.GetClass(s.buffer.Info[s.buffer.idx].Glyph)
		}

		if debugMode {
			fmt.Printf("APPLY - class %d at %d", class, s.buffer.idx)
		}

		entry := s.machine.GetEntry(state, class)

		/* Unsafe-to-break before this if not in state 0, as things might
		 * go differently if we start from state 0 here.
		 *
		 * Ugh.  The indexing here is ugly... */
		if state != 0 && s.buffer.backtrackLen() != 0 && s.buffer.idx < len(s.buffer.Info) {
			/* If there's no action and we're just epsilon-transitioning to state 0,
			 * safe to break. */
			if c.isActionable(s, entry) ||
				!(entry.NewState == stateStartOfText &&
					entry.Flags == DontAdvance) {
				s.buffer.unsafeToBreakFromOutbuffer(s.buffer.backtrackLen()-1, s.buffer.idx+1)
			}
		}

		/* Unsafe-to-break if end-of-text would kick in here. */
		if s.buffer.idx+2 <= len(s.buffer.Info) {
			end_entry := s.machine.GetEntry(state, classEndOfText)
			if c.isActionable(s, end_entry) {
				s.buffer.unsafeToBreak(s.buffer.idx, s.buffer.idx+2)
			}
		}

		c.transition(s, entry)

		state = entry.NewState

		if debugMode {
			fmt.Printf("APPLY - state %d", state)
		}

		if s.buffer.idx == len(s.buffer.Info) {
			break
		}

		if entry.Flags&DontAdvance == 0 {
			s.buffer.nextGlyph()
		} else {
			if s.buffer.max_ops <= 0 {
				s.buffer.nextGlyph()
			}
			s.buffer.max_ops--
		}
	}

	if !c.inPlace() {
		for s.buffer.idx < len(s.buffer.Info) {
			s.buffer.nextGlyph()
		}
		s.buffer.swapBuffers()
	}
}

type hb_aat_apply_context_t struct {
	//   const char *get_name () { return "APPLY"; }
	//   template <typename T>
	//   return_t dispatch (const T &obj) { return obj.apply (this); }
	//   static return_t default_return_value () { return false; }
	//   bool stop_sublookup_iteration (return_t r) const { return r; }

	plan   *hb_ot_shape_plan_t
	font   *Font
	face   Face
	buffer *Buffer
	// sanitizer  hb_sanitize_context_t
	ankr_table truetype.TableAnkr
}

func new_hb_aat_apply_context_t(plan *hb_ot_shape_plan_t, font *Font, buffer *Buffer) *hb_aat_apply_context_t {
	var out hb_aat_apply_context_t
	out.plan = plan
	out.font = font
	out.face = font.face
	out.buffer = buffer

	// sanitizer.init(blob)
	// sanitizer.set_num_glyphs(face.get_num_glyphs())
	// sanitizer.start_processing()
	// sanitizer.set_max_ops(HB_SANITIZE_MAX_OPS_MAX)
	return &out
}

//  AAT::hb_aat_apply_context_t::~hb_aat_apply_context_t ()
//  { sanitizer.end_processing (); }

//  void
//  AAT::hb_aat_apply_context_t::set_ankr_table (const AAT::ankr *ankr_table_)
//  { ankr_table = ankr_table_; }

func (c *hb_aat_apply_context_t) applyMorx(chain tt.MorxChain, flags Mask) {
	//  Coverage, see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6morx.html
	const (
		Vertical      = 0x80
		Backwards     = 0x40
		AllDirections = 0x20
		Logical       = 0x10
	)

	for i, subtable := range chain.Subtables {

		if subtable.Flags&flags == 0 {
			continue
		}

		if subtable.Coverage&AllDirections == 0 && c.buffer.Props.Direction.isVertical() !=
			(subtable.Coverage&Vertical != 0) {
			continue
		}

		/* Buffer contents is always in logical direction.  Determine if
		we need to reverse before applying this subtable.  We reverse
		back after if we did reverse indeed.

		Quoting the spec:
		"""
		Bits 28 and 30 of the coverage field control the order in which
		glyphs are processed when the subtable is run by the layout engine.
		Bit 28 is used to indicate if the glyph processing direction is
		the same as logical order or layout order. Bit 30 is used to
		indicate whether glyphs are processed forwards or backwards within
		that order.

		Bit 30	Bit 28	Interpretation for Horizontal Text
		0	0	The subtable is processed in layout order 	(the same order as the glyphs, which is
			always left-to-right).
		1	0	The subtable is processed in reverse layout order (the order opposite that of the glyphs, which is
			always right-to-left).
		0	1	The subtable is processed in logical order (the same order as the characters, which may be
			left-to-right or right-to-left).
		1	1	The subtable is processed in reverse logical order 	(the order opposite that of the characters, which
			may be right-to-left or left-to-right).
		"""
		*/
		var reverse bool
		if subtable.Coverage&Logical != 0 {
			reverse = subtable.Coverage&Backwards != 0
		} else {
			reverse = subtable.Coverage&Backwards != 0 != c.buffer.Props.Direction.IsBackward()
		}

		if debugMode {
			fmt.Printf("MORX - start chainsubtable %d", i)
		}

		if reverse {
			c.buffer.Reverse()
		}

		c.applyMorxSubtable(subtable)

		if reverse {
			c.buffer.Reverse()
		}

		if debugMode {
			fmt.Printf("MORX - end chainsubtable %d", i)
		}

	}
}

func (c *hb_aat_apply_context_t) applyMorxSubtable(subtable tt.MortxSubtable) bool {
	switch data := subtable.Data.(type) {
	case tt.MorxRearrangementSubtable:
		var dc driverContextRearrangement
		driver := newStateTableDriver(tt.AATStateTable(data), c.buffer, c.face)
		driver.drive(&dc)
	case tt.MorxContextualSubtable:
		dc := driverContextContextual{table: data}
		driver := newStateTableDriver(data.Machine, c.buffer, c.face)
		driver.drive(&dc)
		return dc.ret
	case tt.MorxLigatureSubtable:
		dc := driverContextLigature{table: data}
		driver := newStateTableDriver(data.Machine, c.buffer, c.face)
		driver.drive(&dc)
	case tt.MorxInsertionSubtable:
		dc := driverContextInsertion{insertionAction: data.Insertions}
		driver := newStateTableDriver(data.Machine, c.buffer, c.face)
		driver.drive(&dc)
	case tt.MorxNonContextualSubtable:
		var ret bool
		info := c.buffer.Info
		for i := range c.buffer.Info {
			replacement, has := data.ClassID(info[i].Glyph)
			if has {
				info[i].Glyph = fonts.GlyphIndex(replacement)
				ret = true
			}
		}
		return ret
	}
	return false
}

type driverContextRearrangement struct {
	start int
	end   int
}

func (driverContextRearrangement) inPlace() bool { return true }

func (d driverContextRearrangement) isActionable(_ StateTableDriver, entry tt.AATStateEntry) bool {
	return (entry.Flags&tt.MRVerb) != 0 && d.start < d.end
}

/* The following map has two nibbles, for start-side
 * and end-side. Values of 0,1,2 mean move that many
 * to the other side. Value of 3 means move 2 and
 * flip them. */
var mapRearrangement = [16]int{
	0x00, /* 0	no change */
	0x10, /* 1	Ax => xA */
	0x01, /* 2	xD => Dx */
	0x11, /* 3	AxD => DxA */
	0x20, /* 4	ABx => xAB */
	0x30, /* 5	ABx => xBA */
	0x02, /* 6	xCD => CDx */
	0x03, /* 7	xCD => DCx */
	0x12, /* 8	AxCD => CDxA */
	0x13, /* 9	AxCD => DCxA */
	0x21, /* 10	ABxD => DxAB */
	0x31, /* 11	ABxD => DxBA */
	0x22, /* 12	ABxCD => CDxAB */
	0x32, /* 13	ABxCD => CDxBA */
	0x23, /* 14	ABxCD => DCxAB */
	0x33, /* 15	ABxCD => DCxBA */
}

func (d *driverContextRearrangement) transition(driver StateTableDriver, entry tt.AATStateEntry) {
	buffer := driver.buffer
	flags := entry.Flags

	if flags&tt.MRMarkFirst != 0 {
		d.start = buffer.idx
	}

	if flags&tt.MRMarkLast != 0 {
		d.end = min(buffer.idx+1, len(buffer.Info))
	}

	if (flags&tt.MRVerb) != 0 && d.start < d.end {

		m := mapRearrangement[flags&tt.MRVerb]
		l := min(2, m>>4)
		r := min(2, m&0x0F)
		reverseL := 3 == (m >> 4)
		reverseR := 3 == (m & 0x0F)

		if d.end-d.start >= l+r {
			buffer.mergeClusters(d.start, min(buffer.idx+1, len(buffer.Info)))
			buffer.mergeClusters(d.start, d.end)

			info := buffer.Info
			var buf [4]GlyphInfo

			copy(buf[:], info[d.start:d.start+l])
			copy(buf[2:], info[d.end-r:d.end])

			if l != r {
				copy(info[d.start+r:], info[d.start+l:d.end-r])
			}

			copy(info[d.start:d.start+r], buf[2:])
			copy(info[d.end-l:d.end], buf[:])
			if reverseL {
				buf[0] = info[d.end-1]
				info[d.end-1] = info[d.end-2]
				info[d.end-2] = buf[0]
			}
			if reverseR {
				buf[0] = info[d.start]
				info[d.start] = info[d.start+1]
				info[d.start+1] = buf[0]
			}
		}
	}
}

type driverContextContextual struct {
	table   tt.MorxContextualSubtable
	markSet bool
	mark    int
	ret     bool
}

func (driverContextContextual) inPlace() bool { return true }

func (dc driverContextContextual) isActionable(driver StateTableDriver, entry tt.AATStateEntry) bool {
	buffer := driver.buffer

	if buffer.idx == len(buffer.Info) && !dc.markSet {
		return false
	}
	markIndex, currentIndex := entry.AsMorxContextual()
	return markIndex != 0xFFFF || currentIndex != 0xFFFF
}

func (dc *driverContextContextual) transition(driver StateTableDriver, entry tt.AATStateEntry) {
	buffer := driver.buffer

	/* Looks like CoreText applies neither mark nor current substitution for
	 * end-of-text if mark was not explicitly set. */
	if buffer.idx == len(buffer.Info) && !dc.markSet {
		return
	}

	var (
		replacement             uint16 // intepreted as GlyphIndex
		hasRep                  bool
		markIndex, currentIndex = entry.AsMorxContextual()
	)
	if markIndex != 0xFFFF {
		lookup := dc.table.Substitutions[markIndex]
		replacement, hasRep = lookup.ClassID(buffer.Info[dc.mark].Glyph)
	}
	if hasRep {
		buffer.unsafeToBreak(dc.mark, min(buffer.idx+1, len(buffer.Info)))
		buffer.Info[dc.mark].Glyph = fonts.GlyphIndex(replacement)
		dc.ret = true
	}

	hasRep = false
	idx := min(buffer.idx, len(buffer.Info)-1)
	if currentIndex != 0xFFFF {
		lookup := dc.table.Substitutions[currentIndex]
		replacement, hasRep = lookup.ClassID(buffer.Info[idx].Glyph)
	}

	if hasRep {
		buffer.Info[idx].Glyph = fonts.GlyphIndex(replacement)
		dc.ret = true
	}

	if entry.Flags&tt.MCSetMark != 0 {
		dc.markSet = true
		dc.mark = buffer.idx
	}
}

type driverContextLigature struct {
	table          tt.MorxLigatureSubtable
	matchLength    int
	matchPositions [HB_MAX_CONTEXT_LENGTH]int
}

func (driverContextLigature) inPlace() bool { return false }

func (driverContextLigature) isActionable(_ StateTableDriver, entry tt.AATStateEntry) bool {
	return entry.Flags&tt.MLOffset != 0
}

func (dc *driverContextLigature) transition(driver StateTableDriver, entry tt.AATStateEntry) {
	buffer := driver.buffer

	if debugMode {
		fmt.Printf("APPLY - Ligature transition at %d\n", buffer.idx)
	}

	if entry.Flags&tt.MLSetComponent != 0 {
		/* Never mark same index twice, in case DontAdvance was used... */
		if dc.matchLength != 0 && dc.matchPositions[(dc.matchLength-1)%len(dc.matchPositions)] == len(buffer.outInfo) {
			dc.matchLength--
		}

		dc.matchPositions[dc.matchLength%len(dc.matchPositions)] = len(buffer.outInfo)
		dc.matchLength++

		if debugMode {
			fmt.Printf("APPLY - Set component at %d\n", len(buffer.outInfo))
		}

	}

	if dc.isActionable(driver, entry) {

		if debugMode {
			fmt.Printf("APPLY - Perform action with %d\n", dc.matchLength)
		}

		end := len(buffer.outInfo)

		if dc.matchLength == 0 {
			return
		}

		if buffer.idx >= len(buffer.Info) {
			return
		}
		cursor := dc.matchLength

		actionIdx := entry.AsMorxLigature()
		actionData := dc.table.LigatureAction[actionIdx:]

		ligatureIdx := 0
		var action uint32
		for do := true; do; do = action&tt.MLActionLast == 0 {
			if cursor == 0 {
				/* Stack underflow.  Clear the stack. */
				if debugMode {
					fmt.Println("APPLY - Stack underflow")
				}
				dc.matchLength = 0
				break
			}

			if debugMode {
				fmt.Printf("APPLY - Moving to stack position %d\n", cursor-1)
			}

			cursor--
			buffer.moveTo(dc.matchPositions[cursor%len(dc.matchPositions)])

			if len(actionData) == 0 {
				break
			}
			action = actionData[0]

			uoffset := action & tt.MLActionOffset
			if uoffset&0x20000000 != 0 {
				uoffset |= 0xC0000000 /* Sign-extend. */
			}
			offset := int32(uoffset)
			componentIdx := int32(buffer.cur(0).Glyph) + offset
			if int(componentIdx) >= len(dc.table.Component) {
				break
			}
			componentData := dc.table.Component[componentIdx]
			ligatureIdx += int(componentData)

			if debugMode {
				fmt.Printf("APPLY - Action store %d last %d", action&tt.MLActionStore, action&tt.MLActionLast)
			}

			if action&(tt.MLActionStore|tt.MLActionLast) != 0 {
				if ligatureIdx >= len(dc.table.Ligatures) {
					break
				}
				lig := dc.table.Ligatures[ligatureIdx]

				if debugMode {
					fmt.Printf("APPLY - Produced ligature %d\n", lig)
				}

				buffer.replaceGlyphIndex(lig)

				ligEnd := dc.matchPositions[(dc.matchLength-1)%len(dc.matchPositions)] + 1
				/* Now go and delete all subsequent components. */
				for dc.matchLength-1 > cursor {

					if debugMode {
						fmt.Println("APPLY - Skipping ligature component")
					}

					dc.matchLength--
					buffer.moveTo(dc.matchPositions[dc.matchLength%len(dc.matchPositions)])
					buffer.replaceGlyphIndex(0xFFFF)
				}

				buffer.moveTo(ligEnd)
				buffer.mergeOutClusters(dc.matchPositions[cursor%len(dc.matchPositions)], len(buffer.outInfo))
			}

			actionData = actionData[1:]
		}
		buffer.moveTo(end)
	}
}

type driverContextInsertion struct {
	insertionAction []fonts.GlyphIndex
	mark            int
}

func (driverContextInsertion) inPlace() bool { return false }

func (driverContextInsertion) isActionable(_ StateTableDriver, entry tt.AATStateEntry) bool {
	current, marked := entry.AsMorxInsertion()
	return entry.Flags&(tt.MICurrentInsertCount|tt.MIMarkedInsertCount) != 0 && (current != 0xFFFF || marked != 0xFFFF)
}

func (dc *driverContextInsertion) transition(driver StateTableDriver, entry tt.AATStateEntry) {
	buffer := driver.buffer
	flags := entry.Flags

	markLoc := len(buffer.outInfo)
	currentInsertIndex, markedInsertIndex := entry.AsMorxInsertion()
	if markedInsertIndex != 0xFFFF {
		count := int(flags & tt.MIMarkedInsertCount)
		if buffer.max_ops <= 0 {
			buffer.max_ops -= count
			return
		}
		buffer.max_ops -= count
		start := markedInsertIndex
		glyphs := dc.insertionAction[start:]

		before := flags&tt.MIMarkedInsertBefore != 0

		end := len(buffer.outInfo)
		buffer.moveTo(dc.mark)

		if buffer.idx < len(buffer.Info) && !before {
			buffer.copyGlyph()
		}
		/* TODO We ignore KashidaLike setting. */
		for i := 0; i < count; i++ {
			buffer.outputGlyphIndex(glyphs[i])
		}
		if buffer.idx < len(buffer.Info) && !before {
			buffer.skipGlyph()
		}

		buffer.moveTo(end + count)

		buffer.unsafeToBreakFromOutbuffer(dc.mark, min(buffer.idx+1, len(buffer.Info)))
	}

	if flags&tt.MISetMark != 0 {
		dc.mark = markLoc
	}

	if currentInsertIndex != 0xFFFF {
		count := int(flags&tt.MICurrentInsertCount) >> 5
		if buffer.max_ops <= 0 {
			buffer.max_ops -= count
			return
		}
		buffer.max_ops -= count
		start := currentInsertIndex
		glyphs := dc.insertionAction[start:]

		before := flags&tt.MICurrentInsertBefore != 0

		end := len(buffer.outInfo)

		if buffer.idx < len(buffer.Info) && !before {
			buffer.copyGlyph()
		}
		/* TODO We ignore KashidaLike setting. */
		for i := 0; i < count; i++ {
			buffer.outputGlyphIndex(glyphs[i])
		}
		if buffer.idx < len(buffer.Info) && !before {
			buffer.skipGlyph()
		}

		/* Humm. Not sure where to move to.  There's this wording under
		 * DontAdvance flag:
		 *
		 * "If set, don't update the glyph index before going to the new state.
		 * This does not mean that the glyph pointed to is the same one as
		 * before. If you've made insertions immediately downstream of the
		 * current glyph, the next glyph processed would in fact be the first
		 * one inserted."
		 *
		 * This suggests that if DontAdvance is NOT set, we should move to
		 * end+count.  If it *was*, then move to end, such that newly inserted
		 * glyphs are now visible.
		 *
		 * https://github.com/harfbuzz/harfbuzz/issues/1224#issuecomment-427691417
		 */
		moveTo := end
		if flags&tt.MIDontAdvance == 0 {
			moveTo = end + count
		}
		buffer.moveTo(moveTo)
	}
}

///////

type aatFeatureMapping struct {
	otFeatureTag      tt.Tag
	aatFeatureType    hb_aat_layout_feature_type_t
	selectorToEnable  hb_aat_layout_feature_selector_t
	selectorToDisable hb_aat_layout_feature_selector_t
}

// FaatLayoutFindFeatureMapping fetches the AAT feature-and-selector combination that corresponds
// to a given OpenType feature tag, or `nil` if not found.
func aatLayoutFindFeatureMapping(tag tt.Tag) *aatFeatureMapping {
	low, high := 0, len(featureMappings)
	for low < high {
		mid := low + (high-low)/2 // avoid overflow when computing mid
		p := featureMappings[mid].otFeatureTag
		if tag < p {
			high = mid
		} else if tag > p {
			low = mid + 1
		} else {
			return &featureMappings[mid]
		}
	}
	return nil
}

func (plan *hb_ot_shape_plan_t) aatLayoutSubstitute(font *Font, buffer *Buffer) {
	morx := font.otTables.Morx
	c := new_hb_aat_apply_context_t(plan, font, buffer)
	for i, chain := range morx {
		c.applyMorx(chain, c.plan.aat_map.chain_flags[i])
	}
	// TODO:
	// we dont support obsolete 'mort' table
}

func aatLayoutZeroWidthDeletedGlyphs(buffer *Buffer) {
	pos := buffer.Pos
	for i, inf := range buffer.Info {
		if inf.Glyph == 0xFFFF {
			pos[i].XAdvance, pos[i].YAdvance, pos[i].XOffset, pos[i].YOffset = 0, 0, 0, 0
		}
	}
}

func aatLayoutRemoveDeletedGlyphsInplace(buffer *Buffer) {
	otLayoutDeleteGlyphsInplace(buffer, func(info *GlyphInfo) bool {
		return info.Glyph == 0xFFFF
	})
}

func (plan *hb_ot_shape_plan_t) aatLayoutPosition(font *Font, buffer *Buffer) {
	kerx := font.otTables.Kerx

	c := new_hb_aat_apply_context_t(plan, font, buffer)
	c.ankr_table = font.otTables.Ankr
	c.applyKernx(kerx)
}

func (c *hb_aat_apply_context_t) applyKernx(kerx tt.TableKernx) {
	var ret, seenCrossStream bool

	for i, st := range kerx {
		var reverse bool

		// TODO:
		//   if (!T::Types::extended && (st.u.header.coverage & st.u.header.Variation))
		// goto skip;

		if c.buffer.Props.Direction.isHorizontal() != st.IsHorizontal() {
			continue
		}
		reverse = st.IsBackwards() != c.buffer.Props.Direction.IsBackward()

		if debugMode {
			fmt.Printf("AAT - start subtable %d", i)
		}

		if !seenCrossStream && st.IsCrossStream() {
			/* Attach all glyphs into a chain. */
			seenCrossStream = true
			pos := c.buffer.Pos
			// unsigned int count = c.buffer.len;
			for i := range pos {
				pos[i].attach_type = attachTypeCursive
				if c.buffer.Props.Direction.isForward() {
					pos[i].attach_chain = -1
				} else {
					pos[i].attach_chain = +1
				}
				/* We intentionally don't set HB_BUFFER_SCRATCH_FLAG_HAS_GPOS_ATTACHMENT,
				 * since there needs to be a non-zero attachment for post-positioning to
				 * be needed. */
			}
		}

		if reverse {
			c.buffer.Reverse()
		}

		ret = ret || c.applyKerxSubtable(st)

		if reverse {
			c.buffer.Reverse()
		}

		if debugMode {
			fmt.Printf("AAT - start subtable %d", i)
		}

	}
}

func (c *hb_aat_apply_context_t) applyKerxSubtable(st tt.KernSubtable) bool {
	switch data := st.Data.(type) {
	case truetype.Kern0:
		if !c.plan.requested_kerning {
			return false
		}
		if st.IsBackwards() {
			return false
		}
		kern(data, st.IsCrossStream(), c.font, c.buffer, c.plan.kern_mask, true)
	case truetype.Kern1:
		crossStream := st.IsCrossStream()
		if !c.plan.requested_kerning && !crossStream {
			return false
		}
		dc := driverContextKerx1{c: c, table: data, crossStream: crossStream}
		driver := newStateTableDriver(data.Machine, c.buffer, c.face)
		driver.drive(&dc)
	case truetype.Kern2:
		if !c.plan.requested_kerning {
			return false
		}
		if st.IsBackwards() {
			return false
		}
		kern(data, st.IsCrossStream(), c.font, c.buffer, c.plan.kern_mask, true)
	case truetype.Kerx4:
		crossStream := st.IsCrossStream()
		if !c.plan.requested_kerning && !crossStream {
			return false
		}
		dc := driverContextKerx4{c: c, table: data, actionType: data.ActionType()}
		driver := newStateTableDriver(data.Machine, c.buffer, c.face)
		driver.drive(&dc)
	case truetype.Kerx6:
		if !c.plan.requested_kerning {
			return false
		}
		if st.IsBackwards() {
			return false
		}
		kern(data, st.IsCrossStream(), c.font, c.buffer, c.plan.kern_mask, true)
	}
	return true
}

func kern(driver tt.SimpleKerns, crossStream bool, font *Font, buffer *Buffer, kernMask Mask, scale bool) {
	c := new_hb_ot_apply_context_t(1, font, buffer)
	c.set_lookup_mask(kernMask)
	c.set_lookup_props(uint32(truetype.IgnoreMarks))
	skippyIter := &c.iter_input

	horizontal := buffer.Props.Direction.isHorizontal()
	// unsigned int count = buffer.len;
	info := buffer.Info
	pos := buffer.Pos
	for idx := 0; idx < len(pos); {
		if info[idx].mask&kernMask == 0 {
			idx++
			continue
		}

		skippyIter.reset(idx, 1)
		if !skippyIter.next() {
			idx++
			continue
		}

		i := idx
		j := skippyIter.idx

		rawKern, hasKern := driver.KernPair(info[i].Glyph, info[j].Glyph)
		kern := Position(rawKern)

		if !hasKern {
			goto skip
		}

		if horizontal {
			if scale {
				kern = font.em_scale_x(rawKern)
			}
			if crossStream {
				pos[j].YOffset = kern
				buffer.scratchFlags |= HB_BUFFER_SCRATCH_FLAG_HAS_GPOS_ATTACHMENT
			} else {
				kern1 := kern >> 1
				kern2 := kern - kern1
				pos[i].XAdvance += kern1
				pos[j].XAdvance += kern2
				pos[j].XOffset += kern2
			}
		} else {
			if scale {
				kern = font.em_scale_y(rawKern)
			}
			if crossStream {
				pos[j].XOffset = kern
				buffer.scratchFlags |= HB_BUFFER_SCRATCH_FLAG_HAS_GPOS_ATTACHMENT
			} else {
				kern1 := kern >> 1
				kern2 := kern - kern1
				pos[i].YAdvance += kern1
				pos[j].YAdvance += kern2
				pos[j].YOffset += kern2
			}
		}

		buffer.unsafeToBreak(i, j+1)

	skip:
		idx = skippyIter.idx
	}
}

type driverContextKerx1 struct {
	c           *hb_aat_apply_context_t
	table       tt.Kern1
	stack       [8]int
	depth       int
	crossStream bool
}

func (driverContextKerx1) inPlace() bool { return true }

func (driverContextKerx1) isActionable(_ StateTableDriver, entry tt.AATStateEntry) bool {
	return entry.AsKernIndex() != 0xFFFF
}

func (dc *driverContextKerx1) transition(driver StateTableDriver, entry tt.AATStateEntry) {
	buffer := driver.buffer
	flags := entry.Flags

	if flags&tt.Kerx1Reset != 0 {
		dc.depth = 0
	}

	if flags&tt.Kerx1Push != 0 {
		if dc.depth < len(dc.stack) {
			dc.stack[dc.depth] = buffer.idx
			dc.depth++
		} else {
			dc.depth = 0 /* Probably not what CoreText does, but better? */
		}
	}
	kernIdx := entry.AsKernIndex()
	if kernIdx != 0xFFFF && dc.depth != 0 {
		tupleCount := 1 // we do not support tupleCount > 0

		actions := dc.table.Values[kernIdx:]
		if len(actions) < tupleCount*dc.depth {
			dc.depth = 0
			return
		}

		kernMask := dc.c.plan.kern_mask

		/* From Apple 'kern' spec:
		 * "Each pops one glyph from the kerning stack and applies the kerning value to it.
		 * The end of the list is marked by an odd value... */
		var last bool
		for !last && dc.depth != 0 {
			dc.depth--
			idx := dc.stack[dc.depth]
			v := actions[0]
			actions = actions[tupleCount:]
			if idx >= len(buffer.Pos) {
				continue
			}

			/* "The end of the list is marked by an odd value..." */
			last = v&1 != 0
			v &= ^1

			o := &buffer.Pos[idx]

			if buffer.Props.Direction.isHorizontal() {
				if dc.crossStream {
					/* The following flag is undocumented in the spec, but described
					 * in the 'kern' table example. */
					if v == -0x8000 {
						o.attach_type = attachTypeNone
						o.attach_chain = 0
						o.YOffset = 0
					} else if o.attach_type != 0 {
						o.YOffset += dc.c.font.em_scale_y(v)
						buffer.scratchFlags |= HB_BUFFER_SCRATCH_FLAG_HAS_GPOS_ATTACHMENT
					}
				} else if buffer.Info[idx].mask&kernMask != 0 {
					o.XAdvance += dc.c.font.em_scale_x(v)
					o.XOffset += dc.c.font.em_scale_x(v)
				}
			} else {
				if dc.crossStream {
					/* CoreText doesn't do crossStream kerning in vertical.  We do. */
					if v == -0x8000 {
						o.attach_type = attachTypeNone
						o.attach_chain = 0
						o.XOffset = 0
					} else if o.attach_type != 0 {
						o.XOffset += dc.c.font.em_scale_x(v)
						buffer.scratchFlags |= HB_BUFFER_SCRATCH_FLAG_HAS_GPOS_ATTACHMENT
					}
				} else if buffer.Info[idx].mask&kernMask != 0 {
					o.YAdvance += dc.c.font.em_scale_y(v)
					o.YOffset += dc.c.font.em_scale_y(v)
				}
			}
		}
	}
}

type driverContextKerx4 struct {
	c          *hb_aat_apply_context_t
	table      tt.Kerx4
	markSet    bool
	mark       int
	actionType uint8
}

func (driverContextKerx4) inPlace() bool { return true }

func (driverContextKerx4) isActionable(_ StateTableDriver, entry tt.AATStateEntry) bool {
	return entry.AsKernIndex() != 0xFFFF
}

func (dc *driverContextKerx4) transition(driver StateTableDriver, entry tt.AATStateEntry) {
	buffer := driver.buffer

	ankrActionIndex := entry.AsKernIndex()
	if dc.markSet && ankrActionIndex != 0xFFFF && buffer.idx < len(buffer.Pos) {
		o := buffer.curPos(0)
		switch dc.actionType {
		case 0: /* Control Point Actions.*/
			/* Indexed into glyph outline. */
			action := dc.table.Anchors[ankrActionIndex].(tt.KerxAnchorControl)

			markX, markY, okMark := dc.c.font.get_glyph_contour_point_for_origin(dc.c.buffer.Info[dc.mark].Glyph,
				action.Mark, LeftToRight)
			currX, currY, okCurr := dc.c.font.get_glyph_contour_point_for_origin(dc.c.buffer.cur(0).Glyph,
				action.Current, LeftToRight)
			if !okMark || !okCurr {
				return
			}

			o.XOffset = markX - currX
			o.YOffset = markY - currY

		case 1: /* Anchor Point Actions. */
			/* Indexed into 'ankr' table. */
			action := dc.table.Anchors[ankrActionIndex].(tt.KerxAnchorAnchor)

			markAnchor := dc.c.ankr_table.GetAnchor(dc.c.buffer.Info[dc.mark].Glyph, int(action.Mark))
			currAnchor := dc.c.ankr_table.GetAnchor(dc.c.buffer.cur(0).Glyph, int(action.Current))

			o.XOffset = dc.c.font.em_scale_x(markAnchor[0]) - dc.c.font.em_scale_x(currAnchor[0])
			o.YOffset = dc.c.font.em_scale_y(markAnchor[1]) - dc.c.font.em_scale_y(currAnchor[1])

		case 2: /* Control Point Coordinate Actions. */
			action := dc.table.Anchors[ankrActionIndex].(tt.KerxAnchorCoordinates)
			o.XOffset = dc.c.font.em_scale_x(action.MarkX) - dc.c.font.em_scale_x(action.CurrentX)
			o.YOffset = dc.c.font.em_scale_y(action.MarkY) - dc.c.font.em_scale_y(action.CurrentY)
		}
		o.attach_type = attachTypeMark
		o.attach_chain = int16(dc.mark - buffer.idx)
		buffer.scratchFlags |= HB_BUFFER_SCRATCH_FLAG_HAS_GPOS_ATTACHMENT
	}

	const Mark = 0x8000 /* If set, remember this glyph as the marked glyph. */
	if entry.Flags&Mark != 0 {
		dc.markSet = true
		dc.mark = buffer.idx
	}
}

func (plan *hb_ot_shape_plan_t) aatLayoutTrack(font *Font, buffer *Buffer) {
	trak := font.otTables.Trak

	c := new_hb_aat_apply_context_t(plan, font, buffer)
	c.applyTrak(trak)
}

func (c *hb_aat_apply_context_t) applyTrak(trak tt.TableTrak) {
	trakMask := c.plan.trak_mask

	ptem := c.font.Ptem
	if ptem <= 0. {
		return
	}

	buffer := c.buffer
	if buffer.Props.Direction.isHorizontal() {
		trackData := trak.Horizontal
		tracking := trackData.GetTracking(ptem, 0)
		offsetToAdd := c.font.em_scalef_x(tracking / 2)
		advanceToAdd := c.font.em_scalef_x(tracking)

		iter, count := buffer.graphemesIterator()
		for start, _ := iter.Next(); start < count; start, _ = iter.Next() {
			if buffer.Info[start].mask&trakMask == 0 {
				continue
			}
			buffer.Pos[start].XAdvance += advanceToAdd
			buffer.Pos[start].XOffset += offsetToAdd
		}

	} else {
		trackData := trak.Vertical
		tracking := trackData.GetTracking(ptem, 0)
		offsetToAdd := c.font.em_scalef_y(tracking / 2)
		advanceToAdd := c.font.em_scalef_y(tracking)
		iter, count := buffer.graphemesIterator()
		for start, _ := iter.Next(); start < count; start, _ = iter.Next() {
			if buffer.Info[start].mask&trakMask == 0 {
				continue
			}
			buffer.Pos[start].YAdvance += advanceToAdd
			buffer.Pos[start].YOffset += offsetToAdd
		}

	}
}

/**
 * hb_aat_layout_get_feature_types:
 * @face: #Face to work upon
 * @start_offset: offset of the first feature type to retrieve
 * @feature_count: (inout) (optional): Input = the maximum number of feature types to return;
 *                 Output = the actual number of feature types returned (may be zero)
 * @features: (out caller-allocates) (array length=feature_count): Array of feature types found
 *
 * Fetches a list of the AAT feature types included in the specified face.
 *
 * Return value: Number of all available feature types.
 *
 * Since: 2.2.0
 */
//  unsigned int
//  hb_aat_layout_get_feature_types (Face                    *face,
// 				  unsigned int                  start_offset,
// 				  unsigned int                 *feature_count, /* IN/OUT.  May be NULL. */
// 				  hb_aat_layout_feature_type_t *features       /* OUT.     May be NULL. */)
//  {
//    return face.table.feat.get_feature_types (start_offset, feature_count, features);
//  }

/**
 * hb_aat_layout_feature_type_get_name_id:
 * @face: #Face to work upon
 * @feature_type: The #hb_aat_layout_feature_type_t of the requested feature type
 *
 * Fetches the name identifier of the specified feature type in the face's `name` table.
 *
 * Return value: Name identifier of the requested feature type
 *
 * Since: 2.2.0
 */
//  hb_ot_name_id_t
//  hb_aat_layout_feature_type_get_name_id (Face                    *face,
// 					 hb_aat_layout_feature_type_t  feature_type)
//  {
//    return face.table.feat.get_feature_name_id (feature_type);
//  }

/**
 * hb_aat_layout_feature_type_get_selector_infos:
 * @face: #Face to work upon
 * @feature_type: The #hb_aat_layout_feature_type_t of the requested feature type
 * @start_offset: offset of the first feature type to retrieve
 * @selector_count: (inout) (optional): Input = the maximum number of selectors to return;
 *                  Output = the actual number of selectors returned (may be zero)
 * @selectors: (out caller-allocates) (array length=selector_count) (optional):
 *             A buffer pointer. The selectors available for the feature type queries.
 * @default_index: (out) (optional): The index of the feature's default selector, if any
 *
 * Fetches a list of the selectors available for the specified feature in the given face.
 *
 * If upon return, @default_index is set to #HB_AAT_LAYOUT_NO_SELECTOR_INDEX, then
 * the feature type is non-exclusive.  Otherwise, @default_index is the index of
 * the selector that is selected by default.
 *
 * Return value: Number of all available feature selectors
 *
 * Since: 2.2.0
 */
//  unsigned int
//  hb_aat_layout_feature_type_get_selector_infos (Face                             *face,
// 							hb_aat_layout_feature_type_t           feature_type,
// 							unsigned int                           start_offset,
// 							unsigned int                          *selector_count, /* IN/OUT.  May be NULL. */
// 							hb_aat_layout_feature_selector_info_t *selectors,      /* OUT.     May be NULL. */
// 							unsigned int                          *default_index   /* OUT.     May be NULL. */)
//  {
//    return face.table.feat.get_selector_infos (feature_type, start_offset, selector_count, selectors, default_index);
//  }
