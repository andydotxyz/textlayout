package bitmap

import (
	"fmt"
	"os"
	"testing"
)

var files = []string{
	"test/4x6.pcf",
	"test/8x16.pcf.gz",
	"test/charB18.pcf.gz",
	"test/courB18.pcf.gz",
	"test/hanglg16.pcf.gz", // korean encoding
	"test/helvB18.pcf.gz",
	"test/lubB18.pcf.gz",
	"test/ncenB18.pcf.gz",
	"test/orp-italic.pcf.gz",
	"test/timB18.pcf.gz",
	"test/timR24-ISO8859-1.pcf.gz",
	"test/timR24.pcf.gz",
}

func TestCmap(t *testing.T) {
	for _, file := range files {
		fi, err := os.Open(file)
		if err != nil {
			t.Fatal("can't read test file", err)
		}

		font, err := Parse(fi)
		if err != nil {
			t.Fatal(file, err)
		}
		fi.Close()

		_, enc := font.Cmap()
		fmt.Println(enc)

		iter := font.cmap.Iter()
		for iter.Next() {
			r, g1 := iter.Char()
			font.cmap.Lookup(r + 1)
			g2 := font.cmap.Lookup(r)
			if g2 != g1 {
				t.Fatalf("inconsitent cmap iterator: 0x%04x : %d != %d", r, g1, g2)
			}
		}

		font.cmap.Lookup(0xFFFF)

		fmt.Println(font.computeBitmapSize())
	}
}

// generated by freetype_ref.py from `files`
var expectedSizes = []Size{
	{Height: 6, Width: 4, XPpem: 6, YPpem: 6},
	{Height: 16, Width: 8, XPpem: 16, YPpem: 16},
	{Height: 22, Width: 12, XPpem: 19, YPpem: 19},
	{Height: 18, Width: 11, XPpem: 18, YPpem: 18},
	{Height: 16, Width: 16, XPpem: 16, YPpem: 16},
	{Height: 21, Width: 10, XPpem: 18, YPpem: 18},
	{Height: 20, Width: 11, XPpem: 18, YPpem: 18},
	{Height: 20, Width: 11, XPpem: 18, YPpem: 18},
	{Height: 11, Width: 6, XPpem: 12, YPpem: 12},
	{Height: 19, Width: 10, XPpem: 18, YPpem: 18},
	{Height: 26, Width: 12, XPpem: 24, YPpem: 24},
	{Height: 26, Width: 12, XPpem: 24, YPpem: 24},
}

func TestSize(t *testing.T) {
	for i, file := range files {
		fi, err := os.Open(file)
		if err != nil {
			t.Fatal("can't read test file", err)
		}

		font, err := Parse(fi)
		if err != nil {
			t.Fatal(file, err)
		}
		fi.Close()

		if got := font.computeBitmapSize(); got != expectedSizes[i] {
			t.Fatalf("font %s: expected size %v, got %v", file, expectedSizes[i], got)
		}
	}
}
